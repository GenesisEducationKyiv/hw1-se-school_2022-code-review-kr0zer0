// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockCrypto is a mock of Crypto interface.
type MockCrypto struct {
	ctrl     *gomock.Controller
	recorder *MockCryptoMockRecorder
}

// MockCryptoMockRecorder is the mock recorder for MockCrypto.
type MockCryptoMockRecorder struct {
	mock *MockCrypto
}

// NewMockCrypto creates a new mock instance.
func NewMockCrypto(ctrl *gomock.Controller) *MockCrypto {
	mock := &MockCrypto{ctrl: ctrl}
	mock.recorder = &MockCryptoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCrypto) EXPECT() *MockCryptoMockRecorder {
	return m.recorder
}

// GetBtcUahRate mocks base method.
func (m *MockCrypto) GetBtcUahRate() (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBtcUahRate")
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBtcUahRate indicates an expected call of GetBtcUahRate.
func (mr *MockCryptoMockRecorder) GetBtcUahRate() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBtcUahRate", reflect.TypeOf((*MockCrypto)(nil).GetBtcUahRate))
}

// MockEmailSub is a mock of EmailSub interface.
type MockEmailSub struct {
	ctrl     *gomock.Controller
	recorder *MockEmailSubMockRecorder
}

// MockEmailSubMockRecorder is the mock recorder for MockEmailSub.
type MockEmailSubMockRecorder struct {
	mock *MockEmailSub
}

// NewMockEmailSub creates a new mock instance.
func NewMockEmailSub(ctrl *gomock.Controller) *MockEmailSub {
	mock := &MockEmailSub{ctrl: ctrl}
	mock.recorder = &MockEmailSubMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEmailSub) EXPECT() *MockEmailSubMockRecorder {
	return m.recorder
}

// SendToAll mocks base method.
func (m *MockEmailSub) SendToAll() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendToAll")
	ret0, _ := ret[0].(error)
	return ret0
}

// SendToAll indicates an expected call of SendToAll.
func (mr *MockEmailSubMockRecorder) SendToAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendToAll", reflect.TypeOf((*MockEmailSub)(nil).SendToAll))
}

// Subscribe mocks base method.
func (m *MockEmailSub) Subscribe(email string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Subscribe", email)
	ret0, _ := ret[0].(error)
	return ret0
}

// Subscribe indicates an expected call of Subscribe.
func (mr *MockEmailSubMockRecorder) Subscribe(email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*MockEmailSub)(nil).Subscribe), email)
}

// MockEmailSubscriptionRepo is a mock of EmailSubscriptionRepo interface.
type MockEmailSubscriptionRepo struct {
	ctrl     *gomock.Controller
	recorder *MockEmailSubscriptionRepoMockRecorder
}

// MockEmailSubscriptionRepoMockRecorder is the mock recorder for MockEmailSubscriptionRepo.
type MockEmailSubscriptionRepoMockRecorder struct {
	mock *MockEmailSubscriptionRepo
}

// NewMockEmailSubscriptionRepo creates a new mock instance.
func NewMockEmailSubscriptionRepo(ctrl *gomock.Controller) *MockEmailSubscriptionRepo {
	mock := &MockEmailSubscriptionRepo{ctrl: ctrl}
	mock.recorder = &MockEmailSubscriptionRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEmailSubscriptionRepo) EXPECT() *MockEmailSubscriptionRepoMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockEmailSubscriptionRepo) Add(email string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", email)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add.
func (mr *MockEmailSubscriptionRepoMockRecorder) Add(email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockEmailSubscriptionRepo)(nil).Add), email)
}

// GetAll mocks base method.
func (m *MockEmailSubscriptionRepo) GetAll() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockEmailSubscriptionRepoMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockEmailSubscriptionRepo)(nil).GetAll))
}

// MockMailer is a mock of Mailer interface.
type MockMailer struct {
	ctrl     *gomock.Controller
	recorder *MockMailerMockRecorder
}

// MockMailerMockRecorder is the mock recorder for MockMailer.
type MockMailerMockRecorder struct {
	mock *MockMailer
}

// NewMockMailer creates a new mock instance.
func NewMockMailer(ctrl *gomock.Controller) *MockMailer {
	mock := &MockMailer{ctrl: ctrl}
	mock.recorder = &MockMailerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMailer) EXPECT() *MockMailerMockRecorder {
	return m.recorder
}

// SendToList mocks base method.
func (m *MockMailer) SendToList(emails []string, message string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendToList", emails, message)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendToList indicates an expected call of SendToList.
func (mr *MockMailerMockRecorder) SendToList(emails, message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendToList", reflect.TypeOf((*MockMailer)(nil).SendToList), emails, message)
}
