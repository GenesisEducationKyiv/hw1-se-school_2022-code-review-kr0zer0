// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockCrypto is a mock of Crypto interface.
type MockCrypto struct {
	ctrl     *gomock.Controller
	recorder *MockCryptoMockRecorder
}

// MockCryptoMockRecorder is the mock recorder for MockCrypto.
type MockCryptoMockRecorder struct {
	mock *MockCrypto
}

// NewMockCrypto creates a new mock instance.
func NewMockCrypto(ctrl *gomock.Controller) *MockCrypto {
	mock := &MockCrypto{ctrl: ctrl}
	mock.recorder = &MockCryptoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCrypto) EXPECT() *MockCryptoMockRecorder {
	return m.recorder
}

// GetBtcUahRate mocks base method.
func (m *MockCrypto) GetBtcUahRate() (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBtcUahRate")
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBtcUahRate indicates an expected call of GetBtcUahRate.
func (mr *MockCryptoMockRecorder) GetBtcUahRate() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBtcUahRate", reflect.TypeOf((*MockCrypto)(nil).GetBtcUahRate))
}

// GetCurrentExchangeRate mocks base method.
func (m *MockCrypto) GetCurrentExchangeRate(cryptoSymbol, fiatSymbol string) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrentExchangeRate", cryptoSymbol, fiatSymbol)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCurrentExchangeRate indicates an expected call of GetCurrentExchangeRate.
func (mr *MockCryptoMockRecorder) GetCurrentExchangeRate(cryptoSymbol, fiatSymbol interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentExchangeRate", reflect.TypeOf((*MockCrypto)(nil).GetCurrentExchangeRate), cryptoSymbol, fiatSymbol)
}

// MockEmailSub is a mock of EmailSub interface.
type MockEmailSub struct {
	ctrl     *gomock.Controller
	recorder *MockEmailSubMockRecorder
}

// MockEmailSubMockRecorder is the mock recorder for MockEmailSub.
type MockEmailSubMockRecorder struct {
	mock *MockEmailSub
}

// NewMockEmailSub creates a new mock instance.
func NewMockEmailSub(ctrl *gomock.Controller) *MockEmailSub {
	mock := &MockEmailSub{ctrl: ctrl}
	mock.recorder = &MockEmailSubMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEmailSub) EXPECT() *MockEmailSubMockRecorder {
	return m.recorder
}

// SendToAll mocks base method.
func (m *MockEmailSub) SendToAll() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendToAll")
	ret0, _ := ret[0].(error)
	return ret0
}

// SendToAll indicates an expected call of SendToAll.
func (mr *MockEmailSubMockRecorder) SendToAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendToAll", reflect.TypeOf((*MockEmailSub)(nil).SendToAll))
}

// Subscribe mocks base method.
func (m *MockEmailSub) Subscribe(email string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Subscribe", email)
	ret0, _ := ret[0].(error)
	return ret0
}

// Subscribe indicates an expected call of Subscribe.
func (mr *MockEmailSubMockRecorder) Subscribe(email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*MockEmailSub)(nil).Subscribe), email)
}
