// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockEmailSubscription is a mock of EmailSubscription interface.
type MockEmailSubscription struct {
	ctrl     *gomock.Controller
	recorder *MockEmailSubscriptionMockRecorder
}

// MockEmailSubscriptionMockRecorder is the mock recorder for MockEmailSubscription.
type MockEmailSubscriptionMockRecorder struct {
	mock *MockEmailSubscription
}

// NewMockEmailSubscription creates a new mock instance.
func NewMockEmailSubscription(ctrl *gomock.Controller) *MockEmailSubscription {
	mock := &MockEmailSubscription{ctrl: ctrl}
	mock.recorder = &MockEmailSubscriptionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEmailSubscription) EXPECT() *MockEmailSubscriptionMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockEmailSubscription) Add(email string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", email)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add.
func (mr *MockEmailSubscriptionMockRecorder) Add(email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockEmailSubscription)(nil).Add), email)
}

// GetAll mocks base method.
func (m *MockEmailSubscription) GetAll() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockEmailSubscriptionMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockEmailSubscription)(nil).GetAll))
}

// MockEmailSending is a mock of EmailSending interface.
type MockEmailSending struct {
	ctrl     *gomock.Controller
	recorder *MockEmailSendingMockRecorder
}

// MockEmailSendingMockRecorder is the mock recorder for MockEmailSending.
type MockEmailSendingMockRecorder struct {
	mock *MockEmailSending
}

// NewMockEmailSending creates a new mock instance.
func NewMockEmailSending(ctrl *gomock.Controller) *MockEmailSending {
	mock := &MockEmailSending{ctrl: ctrl}
	mock.recorder = &MockEmailSendingMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEmailSending) EXPECT() *MockEmailSendingMockRecorder {
	return m.recorder
}

// SendToList mocks base method.
func (m *MockEmailSending) SendToList(emails []string, message string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendToList", emails, message)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendToList indicates an expected call of SendToList.
func (mr *MockEmailSendingMockRecorder) SendToList(emails, message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendToList", reflect.TypeOf((*MockEmailSending)(nil).SendToList), emails, message)
}
