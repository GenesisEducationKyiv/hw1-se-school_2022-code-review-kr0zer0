// Code generated by MockGen. DO NOT EDIT.
// Source: router.go

// Package mock_handler is a generated GoMock package.
package mock_handler

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockCryptoService is a mock of CryptoService interface.
type MockCryptoService struct {
	ctrl     *gomock.Controller
	recorder *MockCryptoServiceMockRecorder
}

// MockCryptoServiceMockRecorder is the mock recorder for MockCryptoService.
type MockCryptoServiceMockRecorder struct {
	mock *MockCryptoService
}

// NewMockCryptoService creates a new mock instance.
func NewMockCryptoService(ctrl *gomock.Controller) *MockCryptoService {
	mock := &MockCryptoService{ctrl: ctrl}
	mock.recorder = &MockCryptoServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCryptoService) EXPECT() *MockCryptoServiceMockRecorder {
	return m.recorder
}

// GetBtcUahRate mocks base method.
func (m *MockCryptoService) GetBtcUahRate() (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBtcUahRate")
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBtcUahRate indicates an expected call of GetBtcUahRate.
func (mr *MockCryptoServiceMockRecorder) GetBtcUahRate() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBtcUahRate", reflect.TypeOf((*MockCryptoService)(nil).GetBtcUahRate))
}

// MockEmailSubService is a mock of EmailSubService interface.
type MockEmailSubService struct {
	ctrl     *gomock.Controller
	recorder *MockEmailSubServiceMockRecorder
}

// MockEmailSubServiceMockRecorder is the mock recorder for MockEmailSubService.
type MockEmailSubServiceMockRecorder struct {
	mock *MockEmailSubService
}

// NewMockEmailSubService creates a new mock instance.
func NewMockEmailSubService(ctrl *gomock.Controller) *MockEmailSubService {
	mock := &MockEmailSubService{ctrl: ctrl}
	mock.recorder = &MockEmailSubServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEmailSubService) EXPECT() *MockEmailSubServiceMockRecorder {
	return m.recorder
}

// SendToAll mocks base method.
func (m *MockEmailSubService) SendToAll() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendToAll")
	ret0, _ := ret[0].(error)
	return ret0
}

// SendToAll indicates an expected call of SendToAll.
func (mr *MockEmailSubServiceMockRecorder) SendToAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendToAll", reflect.TypeOf((*MockEmailSubService)(nil).SendToAll))
}

// Subscribe mocks base method.
func (m *MockEmailSubService) Subscribe(email string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Subscribe", email)
	ret0, _ := ret[0].(error)
	return ret0
}

// Subscribe indicates an expected call of Subscribe.
func (mr *MockEmailSubServiceMockRecorder) Subscribe(email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*MockEmailSubService)(nil).Subscribe), email)
}
